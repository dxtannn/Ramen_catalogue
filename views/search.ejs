<% layout('layouts/boilerplate') %>
    <form class="text-white mx-4" action="/catalogue/search" method="POST">
        <div class="form-group row">
            <div class="col-3">
                <label for="brand">Brand</label>
                <input type="text" class="form-control" name="brand" id="brand" value="" placeholder="All">
            </div>
            <div class="col-3">
                <label for="country">Country</label>
                <input type="text" class="form-control" name="country" id="country" value="" placeholder="All">
            </div>
            <div class="col-3">
                <label for="stars">Stars</label>
                <select class="form-control" name="stars" id="stars">
                    <option value="" default>All</option>
                    <option value=1>1 and above</option>
                    <option value=2>2 and above</option>
                    <option value=3>3 and above</option>
                    <option value=4>4 and above</option>
                    <option value=5>5</option>
                </select>
            </div>
            <div class="col-3">
                <label for="style">Style</label>
                <select class="form-control" name="style" id="style">
                    <option value="" default>All</option>
                    <% for(item of stylearray){%>
                        <option value="<%= item.style %>">
                            <%= item.style %>
                        </option>
                        <%} %>
                </select>
            </div>
        </div>
        <div class="form-group row mx-3">
            <button type="submit" class="col-12 btn btn-info">Submit</button>
        </div>
    </form>
    <div class="container">
        <div class="row">
            <div class="card text-center text-white bg-success col-12 mb-5">
                <div class="card-header">Total of <%= searchdata.length %> results!</div>
                <div class="card-body">
                    <h5 class="card-title">Your search details are :</h5>
                    <p class="card-text">Brand: <%= searchdict.brand ? searchdict.brand : "All" %>
                    </p>
                    <p class="card-text">Country: <%= searchdict.country ? searchdict.country : "All" %>
                    </p>
                    <p class="card-text">Stars: <%= searchdict.stars ? searchdict.stars['$gte'] + " and above" : "All" %> 
                    </p>
                    <p class="card-text">Style: <%= searchdict.style ? searchdict.style : "All"%>
                    </p>
                </div>
            </div>
        </div>
        <div id='map' class='mb-3' style='width: 100%; height: 400px;'></div>
        <% for(let data of searchdata){%>
            <div class="card-group">
                <div class="card">
                    <div class="card-body">
                        <h5 class="card-title">
                            <%= data.variety %>
                        </h5>
                        <p class="card-text">
                            <%= data.brand %>
                        </p>
                        <p class="card-text">
                            <%= data.style %>
                        </p>
                        <p class="card-text">
                            <%= data.stars %>/5
                        </p>
                        <p class="card-text"><small class="text-muted">
                                <%= data.country %>
                            </small>
                        </p>
                        <a href="/catalogue/<%= data._id %> " class="btn btn-primary">Show</a>
                    </div>
                </div>
            </div>
            <%} %>

<script>
const mapToken = '<%- process.env.MAPBOX_TOKEN%>';
const searchdata = {features: <%- JSON.stringify(searchdata) %>};

mapboxgl.accessToken = mapToken;
const map = new mapboxgl.Map({
    container: 'map',
    style: 'mapbox://styles/mapbox/light-v10',
    center: [0,20],
    zoom: 1
});




map.on('load', function () {
    // Add a new source from our GeoJSON data and
    // set the 'cluster' option to true. GL-JS will
    // add the point_count property to your source data.
    map.addSource('searchdata', {
        type: 'geojson',
        // Point to GeoJSON data. This example visualizes all M1.0+ earthquakes
        // from 12/22/15 to 1/21/16 as logged by USGS' Earthquake hazards program.
        data: searchdata,
        cluster: true,
        clusterMaxZoom: 14, // Max zoom to cluster points on
        clusterRadius: 50 // Radius of each cluster when clustering points (defaults to 50)
    });

    map.addLayer({
        id: 'clusters',
        type: 'circle',
        source: 'searchdata',
        filter: ['has', 'point_count'],
        paint: {
            // Use step expressions (https://docs.mapbox.com/mapbox-gl-js/style-spec/#expressions-step)
            // with three steps to implement three types of circles:
            //   * Blue, 20px circles when point count is less than 100
            //   * Yellow, 30px circles when point count is between 100 and 750
            //   * Pink, 40px circles when point count is greater than or equal to 750
            'circle-color': [
                'step',
                ['get', 'point_count'],
                '#00BCD4',
                10,
                '#2196F3',
                30,
                '#3F51B5'
            ],
            'circle-radius': [
                'step',
                ['get', 'point_count'],
                15,
                10,
                20,
                30,
                25
            ]
        }
    });

    map.addLayer({
        id: 'cluster-count',
        type: 'symbol',
        source: 'searchdata',
        filter: ['has', 'point_count'],
        layout: {
            'text-field': '{point_count_abbreviated}',
            'text-font': ['DIN Offc Pro Medium', 'Arial Unicode MS Bold'],
            'text-size': 12
        }
    });

    map.addLayer({
        id: 'unclustered-point',
        type: 'circle',
        source: 'searchdata',
        filter: ['!', ['has', 'point_count']],
        paint: {
            'circle-color': '#11b4da',
            'circle-radius': 4,
            'circle-stroke-width': 1,
            'circle-stroke-color': '#fff'
        }
    });

    // inspect a cluster on click
    map.on('click', 'clusters', function (e) {
        const features = map.queryRenderedFeatures(e.point, {
            layers: ['clusters']
        });
        const clusterId = features[0].properties.cluster_id;
        map.getSource('searchdata').getClusterExpansionZoom(
            clusterId,
            function (err, zoom) {
                if (err) return;

                map.easeTo({
                    center: features[0].geometry.coordinates,
                    zoom: 5
                });
            }
        );
    });

    // When a click event occurs on a feature in
    // the unclustered-point layer, open a popup at
    // the location of the feature, with
    // description HTML from its properties.
    // map.on('click', 'unclustered-point', function (e) {
    //     const { popUpMarkup } = e.features[0].properties;
    //     const coordinates = e.features[0].geometry.coordinates.slice();

        // Ensure that if the map is zoomed out such that
        // multiple copies of the feature are visible, the
        // popup appears over the copy being pointed to.
    //     while (Math.abs(e.lngLat.lng - coordinates[0]) > 180) {
    //         coordinates[0] += e.lngLat.lng > coordinates[0] ? 360 : -360;
    //     }

    //     new mapboxgl.Popup()
    //         .setLngLat(coordinates)
    //         .setHTML(popUpMarkup)
    //         .addTo(map);
    // });
    // const popup = new mapboxgl.Popup({
    //     closeButton: false,
    //     closeOnClick: false
    // });

    map.on('mouseenter', 'clusters', function (e) {
        map.getCanvas().style.cursor = 'pointer';
        // Copy coordinates array.
        const coordinates = e.features[0].geometry.coordinates.slice();

        // for(let individual of searchdata.features){
        //     description = individual.country
        //     console.log(coordinates)
        //     console.log(individual.geometry.coordinates)
        //     if(individual.geometry.coordinates.join(',') === coordinates.join(',')){
        //         description = individual.country
        //         console.log(description)
        //         break
        //     }
        // }
        // Ensure that if the map is zoomed out such that multiple
        // copies of the feature are visible, the popup appears
        // over the copy being pointed to.
        while (Math.abs(e.lngLat.lng - coordinates[0]) > 180) {
        coordinates[0] += e.lngLat.lng > coordinates[0] ? 360 : -360;
        }
        
        // Populate the popup and set its coordinates
        // based on the feature found.
        // popup.setLngLat(coordinates).setHTML(description).addTo(map);
    });
    map.on('mouseleave', 'clusters', function () {
        map.getCanvas().style.cursor = '';
        popup.remove();
    });
});
</script>